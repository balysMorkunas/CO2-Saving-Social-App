package model;

import org.junit.jupiter.api.Test;

import javax.swing.*;

import java.io.File;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;


class ActionLogTest {

    Date dateTime1 = new Date();
    Date dateTime2 = new Date();

    ActionLog actionLogTest = new ActionLog(8, "vegan", "cool description",  5, dateTime1, 5, "Bob");

    ActionLog actionLogTest2 = new ActionLog(8, "vegan", "cool description",  5, dateTime2, 5, "Bob");

    ActionLog actionLogTest3 = new ActionLog();

    @org.junit.jupiter.api.Test
    void getId() {
        assertEquals(8, actionLogTest.getId());
    }

    @org.junit.jupiter.api.Test
    void setId() {
        actionLogTest.setId(2);
        assertEquals(2, actionLogTest.getId());
    }


    @org.junit.jupiter.api.Test
    void getType() {
        assertEquals("vegan", actionLogTest.getType());
    }

    @org.junit.jupiter.api.Test
    void setType() {
        actionLogTest.setType("transport");
        assertEquals("transport", actionLogTest.getType());
    }


    @org.junit.jupiter.api.Test
    void getDescription() {
        assertEquals("cool description", actionLogTest.getDescription());
    }


    @org.junit.jupiter.api.Test
    void setDescription() {
        actionLogTest.setDescription("bicycle");
        assertEquals("bicycle", actionLogTest.getDescription());
    }

    @org.junit.jupiter.api.Test
    void getPoints() {
        assertEquals(5, actionLogTest.getPoints());
    }

    @org.junit.jupiter.api.Test
    void setPoints() {
        actionLogTest.setPoints(3);
        assertEquals(3, actionLogTest.getPoints());
    }

    @org.junit.jupiter.api.Test
    void getDateTime() {
        assertEquals(dateTime1, actionLogTest.getDateTime());
    }

    @org.junit.jupiter.api.Test
    void setDateTime() {
        actionLogTest.setDateTime(dateTime2);
        assertEquals(dateTime2, actionLogTest.getDateTime());
    }

    @org.junit.jupiter.api.Test
    void getPersonId() {
        assertEquals(5, actionLogTest.getPerson_id());
    }

    @org.junit.jupiter.api.Test
    void setPersonId() {
        actionLogTest.setPerson_id(6);
        assertEquals(6, actionLogTest.getPerson_id());
    }

    @org.junit.jupiter.api.Test
    void getToString() {
        String toString = actionLogTest.toString();
        assertTrue(toString.contains("points=" + 5));

    }

    @org.junit.jupiter.api.Test
    void emptyConstructor() {
        ActionLog f = new ActionLog();
        assertNotNull(f);
    }

    @org.junit.jupiter.api.Test
    void getFirstName() {
        assertEquals("Bob", actionLogTest.getFirstName());
    }


    @org.junit.jupiter.api.Test
    void setFirstName() {
        actionLogTest.setFirstName("Bill");
        assertEquals("Bill", actionLogTest.getFirstName());
    }

    @org.junit.jupiter.api.Test
    void getImage() {
        assertEquals(null, actionLogTest.getImage());
    }


    @org.junit.jupiter.api.Test
    void setImage() {
        actionLogTest.setImage("image");
        assertEquals("image", actionLogTest.getImage());
    }

    @org.junit.jupiter.api.Test
    void setFilePath() {
        assertEquals(null, actionLogTest.getFilePath());
    }

    @org.junit.jupiter.api.Test
    void getFilePath() {
        actionLogTest.setFilePath("/Folder/folder");
        assertEquals("/Folder/folder", actionLogTest.getFilePath());
    }

    @org.junit.jupiter.api.Test
    void getRealImage1() {
        String image = "";
        actionLogTest.setImage(image);
        File file = actionLogTest.getRealImage();

        new File(System.getProperty("user.home") + "\\test\\").mkdirs();
        File file2 = new File(System.getProperty("user.home") + "\\test\\", "a" + 8 + ".jpg");

        assertEquals(file.getPath(), file2.getPath());
    }

    @org.junit.jupiter.api.Test
    void getRealImage2() {
        String image = "";
        actionLogTest.setImage(image);
        File file = actionLogTest.getRealImage();

        new File(System.getProperty("user.home") + "\\test\\").mkdirs();
        File file2 = new File(System.getProperty("user.home") + "\\test\\", "a" + 8 + ".jpg");

        assertFalse(file.getPath() == file2.getPath());
    }

    @org.junit.jupiter.api.Test
    void compare() {
        int result = actionLogTest3.dateComparator.compare(actionLogTest, actionLogTest2);

        assertEquals(0, result);
    }





}

